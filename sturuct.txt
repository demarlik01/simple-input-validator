
@request(method=['GET'])

use None Type...
use Unicode
1. @validator(fields=[IntegerField(name='asdf', max_value=1233), StirngField(name='asdf', max_length="10")])

2. validator = FormValidator()
if validator.validate():
    print 'asdf'

3. require value, optional values
    1. required fields are exist?

class validator:
    
    def __init__:

min only
if min is not None and max is None:
max only
min is None and max is not None
both
min is not None max is not None

inputs = 
{
    'name': 'ho',
    'age' : 13
}
required...

validate
1. exists keys on validator
2. fields.process()
3. error return
@decorate(validator = aValidator)
inputs = (('name', 'asdb'), ('age', 13))
_validator = aValidator(inputs=asdf)

_validatr.inputs = inputs


class Validator:
    def __init__(self):
        inputs = list()
    
    def check_required_names(self):
        1.use inspect module get names of attributes
        2.use getattr to get attribute's object
        3.if objects required attribute true check exists  

    def validate(self):
        is instance Field:
            instance.process()

        
    name = StringField(name='name', value='')


class JoinValidator(Validator):
    name = StringField()
    age = IntegerField()





